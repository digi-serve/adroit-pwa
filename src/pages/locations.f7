<template>
  <div class="page">
    <div class="navbar">
      <div class="navbar-bg bg-color-primary"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back text-color-white">
            <i class="icon icon-back"></i>
            <span>Back</span>
          </a>
        </div>
        <div class="title text-color-white">My Locations</div>
        <div class="right">
          <a href="#" class="link open-dialog text-color-white">
            <i class="material-icons">help</i>
          </a>
        </div>
      </div>
    </div>
    <div class="page-content">
      <div class="list no-hairlines-md">
        <ul>
          <li class="item-content item-input">
            <div class="item-inner">
              <div class="item-input-wrap">
                <input class="addLocation" type="text" placeholder="Add new location" />
              </div>
            </div>
            <div class="item-media">
              <button @click="${addLocation}" class="addLocationButton button button-fill disabled" style="margin-right: 16px;"><i class="material-icons">add</i></button>
            </div>
          </li>
        </ul>
      </div>
      ${hasLocations.value ? $h`
        <div class="list">
          <ul>
            ${locations.value.map((location) => $h`
              <li key=${location.id}>
                <div class="item-content">
                  <div class="item-inner">
                    <div class="item-title">${location}</div>
                    <div class="item-after"><a href="#" class="button" @click="${() => deleteLocation(location)}"><i class="material-icons text-color-red">delete</i></a></div>
                  </div>
                </div>
              </li>
            `)}
          </ul>
        </div>
      ` : $h`
        <!-- Otherwise show preloader -->
        <div style="padding: 30% 0 0 0;" class="block text-align-center">
          <i style="font-size: 148px; color: #CCC;" class="material-icons">location_on</i><br/>
          <p class="text-color-gray"><i>No locations, add one with form above.</i></p>
        </div>
      `}
    </div>
  </div>
</template>
<script>
  export default (props, { $, $f7, $on, $update, $store }) => {
    const locations = $store.getters.myLocations;
    const hasLocations = $store.getters.hasLocations;
    let toastIcon;

    $on('pageInit', () => {
      $store.dispatch('getLocations');
      $store.dispatch('hasLocations');
      // Vertical Buttons
      $('.open-dialog').on('click', function () {
        $f7.dialog.create({
          title: 'Your Saved Locations',
          text: 'As an alternative to selecting one of the default FCF locations, you can add a new location when uploading an activity photo.',
          buttons: [
            {
              text: 'Close',
            }
          ],
          verticalButtons: true,
        }).open();
      });

      $('.addLocation').on('input:notempty', function () {
        $('.addLocationButton').removeClass('disabled');
      });
      $('.addLocation').on('input:empty', function () {
        $('.addLocationButton').addClass('disabled');
      });
    })

    const addLocation = () => {
      let newLocation = $('.addLocation')[0].value.trim();
      $store.dispatch('addLocation', newLocation);
      $store.dispatch('hasLocations');
      $('.addLocation')[0].value = "";
      $f7.toast.create({
        icon: '<i class="material-icons">thumb_up</i>',
        text: `${newLocation} added!`,
        position: 'center',
        closeTimeout: 2000,
      }).open();
    }

    const deleteLocation = (location) => {
      $store.dispatch('deleteLocation', location);
      $store.dispatch('hasLocations');
      $f7.toast.create({
        icon: '<i class="material-icons">delete</i>',
        text: `${location} deleted.`,
        position: 'center',
        closeTimeout: 2000,
      }).open();
    }

    return $render;
  }
</script>
